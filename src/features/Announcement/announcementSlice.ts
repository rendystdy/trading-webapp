import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { fetchNews } from './announcementAPI';
import * as Models from '@/interfaces/news-response'
import newsJson from '@/json/news-json.json';

export interface AnnouncementState {
  news: Models.NewsResponse.INewsResponse
  status: 'idle' | 'loading' | 'failed';
}

const initialState: AnnouncementState = {
  news: newsJson,
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchNewsAsync = createAsyncThunk(
  'announcement/fetchNews',
  async () => {
    const response = await fetchNews();
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const announcementSlice = createSlice({
  name: 'announcement',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchNewsAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchNewsAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        // state.news = action.payload;
      })
      .addCase(fetchNewsAsync.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

export const { } = announcementSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectNews = (state: RootState) => state.announcement.news;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default announcementSlice.reducer;
